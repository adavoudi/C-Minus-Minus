/* Generated By:JavaCC: Do not edit this line. CMM.java */
package Core;


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Stack;

public class CMM implements CMMConstants {

        private Stack<pair> expStack = new Stack<pair>();
    private Stack<Object> ss = new Stack<Object>();
    private Stack<ScopeLevel> currentScope = new Stack<ScopeLevel>();
    private Hashtable<String, String> strings = new Hashtable<String, String>();
    private Hashtable<String, ArrayList<Code>> functions = new Hashtable<String, ArrayList<Code>>();
        private String currentFunction;
        private ArrayList<Code> PB;
    private int i;

    public static void main(String args[]) throws ParseException, FileNotFoundException {
        String path = "test";
        InputStream in = new FileInputStream(path);
        CMM minij = new CMM(in);
        minij.start();
        int k = 0;
        for (Code c : minij.getPB()) {
            System.out.println(k + " : " + c);
            k++;
        }
    }

    public int getCurrentAddr() {
        return Scope.getCurrentAddr();
    }

        public Hashtable<String, ArrayList<Code>> getFunctions() {
                return functions;
        }
    public String setString(String string) {
                String name = "STRING" + strings.size();

                StringBuilder value = new StringBuilder( "'" + string.substring(1,string.length() - 1) + "$'");

                int from = 0;
                while(value.indexOf("\u005c\u005cn",from) != -1)
                {
                        from = value.indexOf("\u005c\u005cn",from);
                        value.replace(from, from+"\u005c\u005cn".length(), "' , CR , LF , '");
                        from++;
                }

                from = 0;
                while(value.indexOf("\u005c\u005ct",from) != -1)
                {
                        from = value.indexOf("\u005c\u005ct",from);
                        value.replace(from, from+"\u005c\u005ct".length(), "' , TAB , '");
                        from++;
                }

                //remove empty strings
                from = 0;
                while(value.indexOf("'' ,",from) != -1)
                {
                        from = value.indexOf("'' ,",from);
                        value.replace(from, from+"'' ,".length(), "");
                        from++;
                }

        strings.put(name , value.toString());

        return name;
    }

        private void defineFunction(String input) throws ParseException {
                if(functions.containsKey(input))
                {
                        throw new ParseException("Function '" + input
                                                + "' has already been defined.");
                }

                currentFunction = input;

                PB = new ArrayList<Code>();
                i = 0;
                functions.put(input,PB);
        }

        private void callFunction(String input) throws ParseException {
                if(!functions.containsKey(input))
                {
                        throw new ParseException("Unknown function '" + input
                                + "'.define it first.");
                }
        }

    public ArrayList<Code> getPB() {
        return PB;
    }

    public Hashtable<String, String> getStrings() {
        return strings;
    }

    private int getTemp() {
        int temp = currentScope.peek().getCurrentAddr();
        currentScope.peek().setCurrentAddr(temp + 2);
        return temp;
    }

    private String getAddr(Object s, String first) {
        String output = getAddr(s);
        if (output.startsWith("RESERVE + ")) {
            return first + output;
        }
        return output;
    }

    private String getAddr(Object s) {

        if (s instanceof Integer) {
            s = (Integer) s;

            return ("RESERVE + " + s.toString());
        }

        return ((String) s).substring(1);
    }



    private void compare(String input) {
        int jp3 = (Integer) ss.pop();
        int jp4 = (Integer) ss.pop();
        int jp10 = (Integer) ss.pop();
        int jp11;

        switch (input) {
            case "==":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new Code("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new Code("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new Code("cmp", "AX", "BX"));
                PB.set(jp3, new Code("jne", "label" + currentFunction + (i), null));
                break;
            case "!=":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new Code("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new Code("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new Code("cmp", "AX", "BX"));
                PB.set(jp3, new Code("je", "label" + currentFunction + (i), null));
                break;
            case "<":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new Code("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new Code("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new Code("cmp", "AX", "BX"));
                PB.set(jp3, new Code("jge", "label" + currentFunction + (i), null));
                break;
            case ">":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new Code("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new Code("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new Code("cmp", "AX", "BX"));
                PB.set(jp3, new Code("jle", "label" + currentFunction + (i), null));
                break;
            case ">=":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new Code("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new Code("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new Code("cmp", "AX", "BX"));
                PB.set(jp3, new Code("jl", "label" + currentFunction + (i), null));
                break;
            case "<=":
                jp11 = (Integer) ss.pop();
                PB.set(jp11, new Code("mov", "BX", getAddr(ss.pop())));
                PB.set(jp10, new Code("mov", "AX", getAddr(ss.pop())));
                PB.set(jp4, new Code("cmp", "AX", "BX"));
                PB.set(jp3, new Code("jg", "label" + currentFunction + (i), null));
                break;
        }

    }

    private void codeGen(String action, String input) throws ParseException{

        switch (action) {

                        case "#makeFunction":
                defineFunction(input);
                break;
            case "#callFunction":
                callFunction(input);
                PB.add(new Code("CALL", input,null ));
                i++;
                break;
                case "#startScopeLevel":
                currentScope.push(new ScopeLevel());
                break;
            case "#endScopeLevel":
                currentScope.pop();
                break;
            case "#scopeStart":
                currentScope.peek().addScope();
                break;
            case "#scopeEnd":
                currentScope.peek().deleteScope();
                break;
            case "#const":
                ss.push("#" + input);
                break;
            case "#variableDef":
                int a = currentScope.peek().addVariable(input);
                ss.push(a);
                break;
            case "#pid":
                int p = currentScope.peek().findVariable(input);
                ss.push(p);
                break;
            case "#add":
                int t = getTemp();

                PB.add(new Code("mov", "CX", getAddr(ss.pop())));
                i++;
                PB.add(new Code("add", "CX", getAddr(ss.pop())));
                i++;
                PB.add(new Code("mov", getAddr(t), "CX"));
                i++;

                ss.push(t);
                break;
            case "#mines":
                int t1 = getTemp();
                String str2 = getAddr(ss.pop());
                PB.add(new Code("mov", "CX", getAddr(ss.pop())));
                i++;
                PB.add(new Code("sub", "CX", str2));
                i++;
                PB.add(new Code("mov", getAddr(t1), "CX"));
                i++;
                ss.push(t1);
                break;
            case "#mul":
                int t2 = getTemp();
                PB.add(new Code("mov", "CX", getAddr(ss.pop())));
                i++;
                PB.add(new Code("mov", "AL", getAddr(ss.pop(), "BYTE PTR ")));
                i++;
                PB.add(new Code("mul", "CL", null));
                i++;
                PB.add(new Code("mov", getAddr(t2), "AX"));
                i++;
                ss.push(t2);
                break;
            case "#div":
                int t3 = getTemp();
                String pa2 = getAddr(ss.pop(), "BYTE PTR ");
                PB.add(new Code("mov", "AX", getAddr(ss.pop())));
                i++;
                PB.add(new Code("mov", "CL", pa2));
                i++;
                PB.add(new Code("div", "CL", null));
                i++;
                PB.add(new Code("mov", getAddr(t3, "BYTE PTR "), "AL"));
                i++;
                ss.push(t3);
                break;
            case "#assign":
                PB.add(new Code("mov", "AX", getAddr(ss.pop())));
                i++;
                PB.add(new Code("mov", getAddr(ss.pop()), "AX"));
                i++;
                break;
            case "#label":
                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                ss.push(i);
                i++;
                break;
            case "#save":
                PB.add(new Code("save", null, null));
                ss.push(i);
                i++;
                break;
            case "#save_pointer":
                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                ss.push(i);
                i++;
                break;
            case "#while":
                compare(input);

                PB.add(new Code("jmp", "label" + currentFunction + ss.pop(), null));
                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                i++;
                i++;
                break;
            case "#until":
                compare(input);

                PB.add(new Code("jmp", "label" + currentFunction + ss.pop(), null));
                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                i++;
                i++;

                break;
            case "#jpf_save":
                compare(input);

                PB.add(new Code("save", null, null));
                ss.push(i);

                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                                i++;
                i++;
                break;
            case "#jp":
                PB.set((Integer) ss.pop(), new Code("jmp", "label" + currentFunction + i, null));
                break;
            case "#jpf":
                                compare(input);

                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                i++;
                break;
            case "#jp_statement":
                PB.add(new Code("jmp", null, null));
                ss.push(i);
                i++;
                break;
            case "#for_jp_statement":
                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                                ss.push(i);
                i++;
                break;
            case "#for":
                int jp_statement = (Integer) ss.pop();
                int jp_condition = (Integer) ss.pop();
                int step_pointer = (Integer) ss.pop();
                int jp_after_condition = (Integer) ss.pop();

                if(!input.equals("nothing"))
                {
                        compare(input);
                }

                int befor_condition = (Integer) ss.pop();

                                PB.set(jp_condition, new Code("jmp", "label" + currentFunction + befor_condition, null));
                                PB.set(jp_after_condition, new Code("jmp", "label" + currentFunction + jp_statement, null));

                                PB.add(new Code("jmp", "label" + currentFunction + step_pointer, null));
                PB.add(new Code("label" + currentFunction + i + ":", null, null));
                                i++;
                i++;
                break;
            case "#print":
                int pr = (Integer) ss.pop();
                PB.add(new Code("mov", "AH", "BYTE PTR " + getAddr(pr + 1)));
                i++;
                PB.add(new Code("mov", "AL", "BYTE PTR " + getAddr(pr)));
                i++;
                PB.add(new Code("CALL", "CONVERT_ASSCII", null));
                i++;
                PB.add(new Code("mov", "AH", "09H"));
                i++;
                PB.add(new Code("lea", "DX", "ASSCII_NUM"));
                i++;
                PB.add(new Code("int", "21H", null));
                i++;
                break;
            case "#printString":
                                String name = setString(input);

                PB.add(new Code("mov", "AH", "09H"));
                i++;
                PB.add(new Code("lea", "DX", name));
                i++;
                PB.add(new Code("int", "21H", null));
                i++;
                break;
            case "#pause":

                PB.add(new Code("mov", "AH", "7H"));
                i++;
                PB.add(new Code("int", "21H", null));
                i++;
                break;
            case "#cls":
                PB.add(new Code("CALL", "CLRSCR", null));
                i++;
                break;
            case "#end":
                PB.add(new Code("label" + currentFunction + i + ": ", null, null));
                i++;
                break;
            case "#inc":
                PB.add(new Code("INC", getAddr(ss.pop()), null));
                i++;
                break;
            case "#dec":
                PB.add(new Code("DEC", getAddr(ss.pop()), null));
                i++;
                break;
        }

    }
    void preStack(pair p) throws ParseException
    {
          String part1 = p.part1;
          switch(part1)
          {
                case "#add":
                        case "#mines":
                        case "#div":
                        case "#mul":
                                while(!expStack.isEmpty() && precedence(expStack.peek().part1) >= precedence(part1))
                                {
                                        pair pa = expStack.pop();
                                        codeGen(pa.part1,pa.part2);
                                }
                                expStack.push(p);
                                break;
                        case "#OP":
                                expStack.push(p);
                                break;
                        case "#CP":
                                while(!expStack.peek().part1.equals("#OP") )
                                {
                                        pair pa = expStack.pop();
                                        codeGen(pa.part1,pa.part2);
                                }
                                expStack.pop();
                        case "#finish":
                                while(!expStack.isEmpty())
                                {
                                        pair pa = expStack.pop();
                                        codeGen(pa.part1,pa.part2);
                                }
                        case "#pid":
                        case "#const":
                                codeGen(p.part1,p.part2);
                                break;
          }
    }

    int precedence(String opt)
    {
        switch(opt)
        {
                case "#add":
                case "#mines":
                        return 1;
                case "#div":
                case "#mul":
                        return 2;
                default:
                        return 0;
        }
    }
    class pair
    {
        public String part1 , part2;

        public pair(String part1,String part2)
        {
                this.part1 = part1;
                this.part2 = part2;
        }

    }

  final public void start() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      functionDef();
    }
          codeGen( "#startScopeLevel" , "");
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
                        codeGen( "#makeFunction" , "main" );
    jj_consume_token(23);
    jj_consume_token(24);
    jj_consume_token(25);
    statement();
    jj_consume_token(26);
             codeGen( "#end" , "");
    jj_consume_token(0);
  }

  final public void functionDef() throws ParseException {
    codeGen( "#startScopeLevel" , "");
    jj_consume_token(VOID);
           Token id;
    id = jj_consume_token(ID);
                                    codeGen( "#makeFunction" , id.image );
    jj_consume_token(23);
    jj_consume_token(24);
    jj_consume_token(25);
    statement();
    jj_consume_token(26);
       codeGen( "#end" , "");
    codeGen( "#endScopeLevel" , "");
  }

  final public void statement() throws ParseException {
    codeGen( "#scopeStart" , "");
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      if (jj_2_3(2)) {
        forloop();
      } else if (jj_2_4(2)) {
        ifCondition();
      } else if (jj_2_5(2)) {
        whileLoop();
      } else if (jj_2_6(2)) {
        DoLoop();
      } else if (jj_2_7(2)) {
        variableDefine();
        jj_consume_token(27);
      } else if (jj_2_8(2)) {
        IncDec();
        jj_consume_token(27);
      } else if (jj_2_9(2)) {
        print();
      } else if (jj_2_10(2)) {
        pause();
      } else if (jj_2_11(2)) {
        cls();
      } else if (jj_2_12(2)) {
        funcCall();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          codeGen( "#scopeEnd" , "");
  }

  final public void funcCall() throws ParseException {
          Token id;
    id = jj_consume_token(ID);
    jj_consume_token(23);
    jj_consume_token(24);
                                            codeGen( "#callFunction" , id.image );
    jj_consume_token(27);
  }

  final public void cls() throws ParseException {
    jj_consume_token(CLS);
    jj_consume_token(23);
    jj_consume_token(24);
    jj_consume_token(27);
                          codeGen( "#cls" , "");
  }

  final public void print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(23);
    if (jj_2_13(2)) {
      E();
                           preStack(new pair( "#finish" , "" ));
                                                                   codeGen( "#print" , "");
    } else if (jj_2_14(2)) {
                                                                                                   Token st;
      st = jj_consume_token(STRING);
                                                                                                                               codeGen( "#printString" , st.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(24);
    jj_consume_token(27);
  }

  final public void pause() throws ParseException {
    jj_consume_token(PAUSE);
    jj_consume_token(23);
    jj_consume_token(24);
    jj_consume_token(27);
                              codeGen( "#pause" , "");
  }

  final public void variableDefine() throws ParseException {
    if (jj_2_15(2)) {
      jj_consume_token(INT);
           Token id;
      id = jj_consume_token(ID);
                                    codeGen( "#variableDef" , id.image );
    } else if (jj_2_16(2)) {
                                                                                  Token id;
      id = jj_consume_token(ID);
                                                                                                           codeGen( "#pid" , id.image );
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
    E();
           preStack(new pair( "#finish" , "" ));
                                                   codeGen( "#assign" , "" );
  }

  final public void IncDec() throws ParseException {
     Token id;
    id = jj_consume_token(ID);
                              codeGen( "#pid" , id.image );
    if (jj_2_17(2)) {
      jj_consume_token(29);
                                                                      codeGen( "#inc" , "");
    } else if (jj_2_18(2)) {
      jj_consume_token(30);
                                                                                                       codeGen( "#dec" , "");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DoLoop() throws ParseException {
   Token op;
    jj_consume_token(DO);
    jj_consume_token(25);
             codeGen( "#label" , "" );
    statement();
    jj_consume_token(26);
    jj_consume_token(WHILE);
    jj_consume_token(23);
    op = RelationalStatement();
                                               codeGen( "#until" , op.image );
    jj_consume_token(24);
    jj_consume_token(27);
  }

  final public void whileLoop() throws ParseException {
   Token op;
    jj_consume_token(WHILE);
    jj_consume_token(23);
                codeGen( "#save_pointer" , "" );
    op = RelationalStatement();
    jj_consume_token(24);
    jj_consume_token(25);
    statement();
    jj_consume_token(26);
       codeGen( "#while" , op.image );
  }

  final public void ifCondition() throws ParseException {
         Token op;
    jj_consume_token(IF);
    jj_consume_token(23);
    op = RelationalStatement();
    jj_consume_token(24);
    jj_consume_token(25);
    statement();
    jj_consume_token(26);
    if (jj_2_20(2)) {
      jj_consume_token(ELSE);
                       codeGen( "#jpf_save" , op.image );
      if (jj_2_19(2)) {
        jj_consume_token(25);
        statement();
                                                                                  codeGen( "#jp" , "" );
        jj_consume_token(26);
      } else {
        statement();
                                                                                                                                 codeGen( "#jp" , "" );
      }
    } else {
             codeGen( "#jpf" , op.image );
    }
  }

  final public void forloop() throws ParseException {
         Token op = null;
    jj_consume_token(FOR);
    jj_consume_token(23);
    if (jj_2_21(2)) {
      variableDefine();
    } else {
      ;
    }
    jj_consume_token(27);
                                            codeGen( "#save_pointer" , "" );
    if (jj_2_22(2)) {
      op = RelationalStatement();
    } else {
      ;
    }
                                                                                                                 codeGen( "#save" , "" );
    jj_consume_token(27);
                                                                                                                                                   codeGen( "#save_pointer" , "" );
    if (jj_2_25(2)) {
      if (jj_2_23(2)) {
                                                                                                                                                                                           Token id;
        id = jj_consume_token(ID);
                                                                                                                                                                                                                    codeGen( "#pid" , id.image );
        jj_consume_token(28);
        E();
                                                                                                                                                                                                                                                            preStack(new pair( "#finish" , "" ));
                                                                                                                                                                                                                                                                                                     codeGen( "#assign" , "" );
      } else if (jj_2_24(2)) {
        IncDec();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
                                                                                                                                                                                                                                                                                                                                                  codeGen( "#save" , "" );
    jj_consume_token(24);
    jj_consume_token(25);
                  codeGen( "#for_jp_statement" , "" );
    statement();
    jj_consume_token(26);
              if(op != null)codeGen( "#for" , op.image );else codeGen( "#for" , "nothing" );
  }

  final public Token RelationalStatement() throws ParseException {
         Token op;
    E();
             preStack(new pair( "#finish" , "" ));
    if (jj_2_26(2)) {
      op = jj_consume_token(31);
    } else if (jj_2_27(2)) {
      op = jj_consume_token(32);
    } else if (jj_2_28(2)) {
      op = jj_consume_token(33);
    } else if (jj_2_29(2)) {
      op = jj_consume_token(34);
    } else if (jj_2_30(2)) {
      op = jj_consume_token(35);
    } else if (jj_2_31(2)) {
      op = jj_consume_token(36);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    E();
                                                                                                                                   preStack(new pair( "#finish" , "" ));
                                                                                                                                                                            codeGen( "#save" , "" );codeGen( "#save" , "" );codeGen( "#save" , "" );codeGen( "#save" , "" );
         {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public void E() throws ParseException {
    if (jj_2_40(2)) {
      if (jj_2_32(2)) {
             Token id1;
        id1 = jj_consume_token(ID);
                                        preStack(new pair( "#pid" , id1.image ));
      } else if (jj_2_33(2)) {
                                                                                       Token id3;
        id3 = jj_consume_token(NUM);
                                                                                                                    preStack(new pair( "#const" , id3.image ));
      } else if (jj_2_34(2)) {
                                                                                                                                                                       Token id4;
        id4 = jj_consume_token(REAL);
                                                                                                                                                                                                     preStack(new pair( "#const" , id4.image ));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_39(2)) {
                  String op;
        if (jj_2_35(2)) {
          jj_consume_token(37);
                                preStack(new pair( "#add" , "" ));
        } else if (jj_2_36(2)) {
          jj_consume_token(38);
                                preStack(new pair( "#mines" , "" ));
        } else if (jj_2_37(2)) {
          jj_consume_token(39);
                                preStack(new pair( "#mul" , "" ));
        } else if (jj_2_38(2)) {
          jj_consume_token(40);
                                preStack(new pair( "#div" , "" ));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        E();
      } else {
        ;
      }
    } else if (jj_2_41(2)) {
      jj_consume_token(23);
                   preStack(new pair( "#OP" , "" ));
      E();
      jj_consume_token(24);
                                                               preStack(new pair( "#CP" , "" ));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_3_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(PAUSE)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(23)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(CLS)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    }
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CMMTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[41];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CMM(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMM(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CMM(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMMTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CMM(CMMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CMMTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 41; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
